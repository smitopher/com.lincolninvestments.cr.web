// ***************************************************************************
// 
// Test CR Service : AA1F
// 
// ***************************************************************************
// 
// Generated by : CA Plex r7.2.1   (Build 24.003)
// Date - Time  : Friday, December 14, 2018 - 4:09 PM
// Group Model  : O:\OBMOD\Grp\LIPCLASS
// Local Model  : C:\Webclient\LIPCLASS_Local(12142018).mdl
// User         : Admin
// Version      : X12.0
// Level        : V12.0
// Variant      : Base
// Language     : Base
// 
// ***************************************************************************
// 
// Make Processing Support:
/*
@OBJ_SURROGATE=0xFFFFFEF0
@FUNCTION=Test CR Service
@FNCLNGSYS=Java
@IMPLEMENTATION_NAME=AA1F
@TYPE=EXTERNAL
@GENVRL=721
*/

package com.lincoln.test;

import ObRun.ObRTTypes.*;
import ObRun.ObComms.*;
import ObRun.ObFunction.*;
import ObRun.ObPanel.ObCtrlData.*;
import java.lang.reflect.*;
import java.util.*;
import java.awt.event.*;

// ***************************************************************************
// User requested imports
// ***************************************************************************

import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
import com.crystaldecisions.sdk.occa.report.exportoptions.ReportExportFormat;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import com.crystaldecisions.sdk.occa.report.application.OpenReportOptions;
import org.apache.commons.pool2.KeyedObjectPool;
import com.lincolninvestments.cr.Constants;

// ***************************************************************************
// Test CR Service Function Class
// ***************************************************************************

public final class AA1F_ObFnc extends ObFunction
{
    ////////////////////////////////////////////////////////////////////////////////
    // Construction Methods:

    //Default constructor - called by class loader
    //when class gets loaded and 'newInstance()' gets called
    public AA1F_ObFnc(ObCallMgr obcallmgr)
    {
        super(obcallmgr);
        AA1F_ObDat varObDat = new AA1F_ObDat( this);
        super.setLocalVariable( varObDat);
        setFunctionName("Test CR Service");
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Variable Access Methods:

    public ObVariableGroup getInVariable()
    {
        if( m_in == null)
            m_in  = new AA1F_ObIn( this);
          return m_in;
    }
    public ObVariableGroup getOutVariable()
    {
        if( m_out == null)
            m_out  = new AA1F_ObOut( this);
          return m_out;
    }
    public ObVariableGroup getDatVariable()
    {
        if( m_locVariable == null)
            m_locVariable  = new AA1F_ObDat( this);
          return m_locVariable;
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Environment variable access methods:

    public void setReturnedStatus(ObCharFld returned)
    {
        ((AA1F_ObDat)getDatVariable()).getVariable(m_strVarAA1F_Environment).getField(m_strFldSqmx0r6).assign(returned);
    }

    public void setReturningStatus(ObCharFld returning)
    {
        ((AA1F_ObDat)getDatVariable()).getVariable(m_strVarAA1F_Environment).getField(m_strFldSqmx0r8).assign(returning);
    }

    public ObCharFld getReturningStatus()
    {
        return (ObCharFld)(((AA1F_ObDat)getDatVariable()).getVariable(m_strVarAA1F_Environment).getField(m_strFldSqmx0r8));
    }

    public void setCallStatus(ObCharFld status)
    {
        ((AA1F_ObDat)getDatVariable()).getVariable(m_strVarAA1F_Environment).getField(m_strFldSqmx0rg).assign(status);
    }


// ***************************************************************************
// Function:	Test CR Service
// ***************************************************************************

    public void ObRun()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Comment  Copyright 2004 Computer Associates International, Inc. All Rights Reserved.

// ***************************************************************************
// Description
// ***************************************************************************

// Seq 
        {
// Pre Point Description
            {
            }
// Edit Point  Description
            {
            }
// Post Point Description
            {
            }

// ***************************************************************************
// Modification history
// ***************************************************************************

// Seq 
            {
// Comment  07-Apr-1999	AGS	Define User meta variable for use in the message meta.#10087644
// Comment  28-Oct-1999	AGS	Define +Terminate meta variable for use in the Terminate meta.#10140727
// Comment  13-Oct-2005	CDC	Edit Point 'Terminate Processing' added to Subroutine Terminate. #12668997;02  #14346413.
// Pre Point Modification history
                {
                }
// Edit Point  Modification history
                {
                }
// Post Point Modification history
                {
                }
            }
        }
// Go Sub  Initialize
        ObSbr_AA1F1();
        if(hasReturned())
            return;

// Pre Point Execute
        {
// Go Sub  Execute
            ObSbr_AA1F4();
            if(hasReturned())
                return;

        }
// Edit Point  Execute
        {
        }
// Post Point Execute
        {
// Go Sub  Terminate
            ObSbr_AA1F2();
            if(hasReturned())
                return;

        }
// Sub  Initialize
// Sub  Terminate
// Sub  Send message
// Pre Point Subroutines
        {
// Sub  Execute
        }
// Edit Point  Subroutines
        {
        }
// Post Point Subroutines
        {
// Sub  Open CrystalAuto Report
// Sub  Set CrystalAuto Rec Sel Formula
// Sub  CrystalAuto Discard Saved Data
// Sub  Close CrystalAuto Report
// Sub  Get CrystalAuto Export Options
// Sub  CrystalAuto Export to PDF
// Sub  New Java ReportClientDocument
// Sub  Set ReportParameters
// Sub  Set ReportParameter Failed
// Sub  Borrow Report Client Document from pool
// Sub  Return Report Client Document to pool
        }

    }


// ***************************************************************************
// Subroutine:	Initialize
// ***************************************************************************

    void ObSbr_AA1F1()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Initialize
// Pre Point Start initialize
        {
// Call  Uibasic/Meta.Options
// Comment  Copyright © 1994-1998 by Sterling Software, Inc. All Rights Reserved.
// Comment  Define meta variables for possible function options
// Comment  Not all of these options are used by the pattern library functions
// Set  Environment<*Returning status> = <*Returning status.*Successful>
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r8).assign(m_obvalfld_0);

        }
// Edit Point  Start initialize
        {
        }
// Post Point Start initialize
        {
        }

// ***************************************************************************
// Message handling & termination setup
// ***************************************************************************

// Seq 
        {
// Set  Environment<*Message delivery> = <*Message delivery.*Log>
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eq).assign(m_obvalfld_1);

        }
// Pre Point End initialize
        {
        }
// Edit Point  End initialize
        {
        }
// Post Point End initialize
        {

// Set  Crystal Report Java Runtime<CRYS ExportFormatName> = m_obvalfld_2
            v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObCharFldField(m_strVarAA5A).assign(m_obvalfld_2);
        }
    }

// ***************************************************************************
// Subroutine:	Terminate
// ***************************************************************************

    void ObSbr_AA1F2()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Terminate
// Pre Point Start terminate
        {
        }
// Edit Point  Start terminate
        {
        }
// Post Point Start terminate
        {
        }
// Comment  Terminate if the option is specified, otherwise Return
// Return
        setReturn();
        if(true) return; /* solves unreachable code compilation errors */

    }

// ***************************************************************************
// Subroutine:	Send message
// ***************************************************************************

    void ObSbr_AA1F3()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Send message
// Pre Point Start send message
        {
        }
// Edit Point  Start send message
        {
        }
// Post Point Start send message
        {
// API Call  Source code: CRYS ReportClientDocument.LogMessages to Service
            try {
               String messageKey = com.lincolninvestments.cr.Constants.WEB_SERVICE_MESSAGES_KEY;
               List<String> messages = (List<String>)getApp().getFromUserStorage(messageKey);
               if (messages == null) {
                  messages = new ArrayList<>();
                  getApp().setToUserStorage(messageKey, messages);
               }
               messages.add(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).getValue());
            } catch (Exception e) {} 

// Comment  try {
//    String messageKey = com.lincolninvestments.cr.Constants.WEB_SERVICE_MESSAGES_KEY;
//    List<String> messages = (List<String>)getApp().getFromUserStorage(messageKey);
//    if (messages == null) {
//       messages = new ArrayList<>();
//       getApp().setToUserStorage(messageKey, messages);
//    }
//    messages.add(&(1:).getValue());
// } catch (Exception e) {} 
        }
// Comment  No message handling if *Message delivery undefined
// Case
        // Start of CASE block
        {
// When  Environment<*Message delivery> == <*Message delivery.*Dialog>
            if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eq).isEqual(m_obvalfld_3) )
            {
// Dialog Message  Message: OBJECTS/Message
                {
                    Object[] msgParms = new Object[1];
                    msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).toString()) ;
                    getApp().logx(getLocalisationProperty("String.100"), msgParms, ObApplication.DIALOG);
                }

// Comment  &(1:)
            }
// When  Environment<*Message delivery> == <*Message delivery.*Status>
            else
            {
                if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eq).isEqual(m_obvalfld_4) )
                {
// Status Message  Message: OBJECTS/Message
                    {
                        Object[] msgParms = new Object[1];
                        msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).toString()) ;
                        getApp().logx(getLocalisationProperty("String.101"), msgParms, ObApplication.STATUS);
                    }

// Comment  &(1:)
                }
// When  Environment<*Message delivery> == <*Message delivery.*Log>
                else
                {
                    if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eq).isEqual(m_obvalfld_1) )
                    {
// Log Message  Message: OBJECTS/Message
                        {
                            Object[] msgParms = new Object[1];
                            msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).toString()) ;
                            getApp().logx(getLocalisationProperty("String.102"), msgParms, ObApplication.LOG);
                        }

// Comment  &(1:)
                    }
// When  Environment<*Message delivery> == <*Message delivery.*None>
                    else
                    {
                        if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eq).isEqual(m_obvalfld_5) )
                        {
                        }
// Otherwise
                        else
                        {
// Pre Point Handle message
                            {
                            }
// Edit Point  Handle message
                            {
                            }
// Post Point Handle message
                            {
                            }
                        }
                    }
                }
            }
        }
        // End of CASE block
// Set  Environment<*Message ID> = <*Message ID.Null>
        v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1g5).assign(m_obvalfld_6);

// Set  Environment<*Message text> = <*Message text.*Blank>
        v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).assign(m_obvalfld_7);

// Pre Point End send message
        {
        }
// Edit Point  End send message
        {
        }
// Post Point End send message
        {
        }
    }

// ***************************************************************************
// Subroutine:	Execute
// ***************************************************************************

    void ObSbr_AA1F4()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Execute
// Pre Point L0 Start Execute
        {
        }
// Edit Point  L0 Start Execute
        {
        }
// Post Point L0 Start Execute
        {
        }
// Pre Point L0 End Execute
        {
// Set  Crystal Report AutoL<CRYS Crystal Report Path> = Input<CRYS Crystal Report Path>
            v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSPATH).assign(in.getVariable(m_strVarAA1F_Input).getAsObCharFldField(m_strVarCRYSPATH));

// Go Sub  Borrow Report Client Document from pool
            ObSbr_AA1F14();
            if(hasReturned())
                return;

// Set  Crystal Report Parameters<Test CR Service.Parameter> = Input<Test CR Service.Parameter>
            v.getVariable(m_strVarAA1F_Crystal20Report20Parameters).getAsObCharFldField(m_strVarcmParameter).assign(in.getVariable(m_strVarAA1F_Input).getAsObCharFldField(m_strVarcmParameter));

// Go Sub  Set ReportParameters
            ObSbr_AA1F12();
            if(hasReturned())
                return;

// Set  Crystal Report AutoL<CRYS Export Dest Path> = Input<CRYS Export Dest Path>
            v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSEXPP).assign(in.getVariable(m_strVarAA1F_Input).getAsObCharFldField(m_strVarCRYSEXPP));

// Go Sub  CrystalAuto Export to PDF
            ObSbr_AA1F10();
            if(hasReturned())
                return;

// Go Sub  Return Report Client Document to pool
            ObSbr_AA1F15();
            if(hasReturned())
                return;

        }
// Edit Point  L0 End Execute
        {
        }
// Post Point L0 End Execute
        {
        }
    }

// ***************************************************************************
// Subroutine:	Open CrystalAuto Report
// ***************************************************************************

    void ObSbr_AA1F5()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Open CrystalAuto Report
// Pre Point L0 Start Open CrystalAuto Report
        {
        }
// Edit Point  L0 Start Open CrystalAuto Report
        {
        }
// Post Point L0 Start Open CrystalAuto Report
        {
        }
// Format Message  Message: ABS LIP Crystal Reports Auto Ptn.CrystalAuto Report Path, Environment<*Message text>

// Comment   
// Cast  Crystal Report AutoL<CRYS Crystal Report Path>, Environment<*Message text>
        v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSPATH).castFrom(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed));

// Pre Point L0 Set CrystalAuto Report Path
        {
        }
// Edit Point  L0 Set CrystalAuto Report Path
        {
        }
// Post Point L0 Set CrystalAuto Report Path
        {
// Set  Crystal Report AutoL<CRYS Crystal Report Path> = Input<CRYS Crystal Report Path>
            v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSPATH).assign(in.getVariable(m_strVarAA1F_Input).getAsObCharFldField(m_strVarCRYSPATH));

        }
// Pre Point Open CrystalAuto Report for other Language
        {
        }
// Edit Point  Open CrystalAuto Report for other Language
        {
        }
// Post Point Open CrystalAuto Report for other Language
        {
// Go Sub  New Java ReportClientDocument
            ObSbr_AA1F11();
            if(hasReturned())
                return;

        }
// Pre Point L0 End Open CrystalAuto Report
        {
        }
// Edit Point  L0 End Open CrystalAuto Report
        {
        }
// Post Point L0 End Open CrystalAuto Report
        {
        }
    }

// ***************************************************************************
// Subroutine:	Set CrystalAuto Rec Sel Formula
// ***************************************************************************

    void ObSbr_AA1F6()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Set CrystalAuto Rec Sel Formula
// Pre Point L0 Start Set CrystalAuto Rec Sel Formula
        {
        }
// Edit Point  L0 Start Set CrystalAuto Rec Sel Formula
        {
        }
// Post Point L0 Start Set CrystalAuto Rec Sel Formula
        {
        }
// Format Message  Message: ABS LIP Crystal Reports Auto Ptn.CrystalAuto Selection Formula, Environment<*Message text>

// Comment   
// Cast  Crystal Report AutoL<CRYS Crystal Selection Formula>, Environment<*Message text>
        v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarWWRKCRYF).castFrom(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed));

// Pre Point L0 Set CrystalAuto Rec Sel Formula
        {
        }
// Edit Point  L0 Set CrystalAuto Rec Sel Formula
        {
        }
// Post Point L0 Set CrystalAuto Rec Sel Formula
        {
        }
// Pre Point Set CrystalAuto Rec Sel Formula other Language
        {
        }
// Edit Point  Set CrystalAuto Rec Sel Formula other Language
        {
        }
// Post Point Set CrystalAuto Rec Sel Formula other Language
        {
// API Call  Source code: CRYS ReportClientDocument.Set CrystalAuto Rec Sel Formula
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
            try {
               ReportClientDocument rcd = (ReportClientDocument)v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue();
               String filterString = v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarWWRKCRYF).getValue();
               rcd.getDataDefController().getRecordFilterController().setFormulaText(filterString);
            } catch (Exception e) {
               v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
               v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
            }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// &(3:).assign(&(4:));
// try {
//    ReportClientDocument rcd = (ReportClientDocument)&(1:).getValue();
//    String filterString = &(2:).getValue();
//    rcd.getDataDefController().getRecordFilterController().setFormulaText(filterString);
// } catch (Exception e) {
//    &(3:).assign(&(5:));
//    &(6:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
            if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
            {
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
                {
                    Object[] msgParms = new Object[4];
                    msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                    v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
                }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

            }
        }
// Pre Point L0 End Set CrystalAuto Rec Sel Formula
        {
        }
// Edit Point  L0 End Set CrystalAuto Rec Sel Formula
        {
        }
// Post Point L0 End Set CrystalAuto Rec Sel Formula
        {
        }
    }

// ***************************************************************************
// Subroutine:	CrystalAuto Discard Saved Data
// ***************************************************************************

    void ObSbr_AA1F7()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  CrystalAuto Discard Saved Data
// Pre Point L0 Start CrystalAuto Discard Saved Data
        {
        }
// Edit Point  L0 Start CrystalAuto Discard Saved Data
        {
        }
// Post Point L0 Start CrystalAuto Discard Saved Data
        {
        }
// Pre Point CrystalAuto Discard Saved Data other Language
        {
        }
// Edit Point  CrystalAuto Discard Saved Data other Language
        {
        }
// Post Point CrystalAuto Discard Saved Data other Language
        {
// API Call  Source code: CRYS ReportClientDocument.TODO Discard Saved Data
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
            try {
               ReportClientDocument rcd = (ReportClientDocument)v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue();
               // TODO
            } catch (Exception e) {
            	v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
            	v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
            }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// &(2:).assign(&(3:));
// try {
//    ReportClientDocument rcd = (ReportClientDocument)&(1:).getValue();
//    // TODO
// } catch (Exception e) {
// 	&(2:).assign(&(4:));
// 	&(5:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
            if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
            {
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
                {
                    Object[] msgParms = new Object[4];
                    msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                    v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
                }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

            }
        }
// Pre Point L0 End CrystalAuto Discard Saved Data
        {
        }
// Edit Point  L0 End CrystalAuto Discard Saved Data
        {
        }
// Post Point L0 End CrystalAuto Discard Saved Data
        {
        }
    }

// ***************************************************************************
// Subroutine:	Close CrystalAuto Report
// ***************************************************************************

    void ObSbr_AA1F8()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Close CrystalAuto Report
// Pre Point L0 Start Close CrystalAuto Report
        {
        }
// Edit Point  L0 Start Close CrystalAuto Report
        {
        }
// Post Point L0 Start Close CrystalAuto Report
        {
        }
// Pre Point Close CrystalAuto Report other Language
        {
        }
// Edit Point  Close CrystalAuto Report other Language
        {
        }
// Post Point Close CrystalAuto Report other Language
        {
// API Call  Source code: CRYS ReportClientDocument.Close CrystalAuto Report
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
            try {
               ReportClientDocument rcd = (ReportClientDocument)v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue();
               v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).setValue(null);
               rcd.close();
            } catch (Exception e) {
            	v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
            	v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
            }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// &(2:).assign(&(3:));
// try {
//    ReportClientDocument rcd = (ReportClientDocument)&(1:).getValue();
//    &(1:).setValue(null);
//    rcd.close();
// } catch (Exception e) {
// 	&(2:).assign(&(4:));
// 	&(5:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
            if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
            {
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
                {
                    Object[] msgParms = new Object[4];
                    msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                    v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
                }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

            }
        }
// Pre Point L0 End Close CrystalAuto Report
        {
        }
// Edit Point  L0 End Close CrystalAuto Report
        {
        }
// Post Point L0 End Close CrystalAuto Report
        {
        }
    }

// ***************************************************************************
// Subroutine:	Get CrystalAuto Export Options
// ***************************************************************************

    void ObSbr_AA1F9()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Get CrystalAuto Export Options
// Pre Point L0 Start Get CrystalAuto Export Options
        {
        }
// Edit Point  L0 Start Get CrystalAuto Export Options
        {
        }
// Post Point L0 Start Get CrystalAuto Export Options
        {
        }
// Pre Point Get CrystalAuto Export Options other Language
        {
        }
// Edit Point  Get CrystalAuto Export Options other Language
        {
        }
// Post Point Get CrystalAuto Export Options other Language
        {
// API Call  Source code: CRYS ExportFormat.getFromName
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
            try {
               String reportFormatName = v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObCharFldField(m_strVarAA5A).getValue();
               v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObObjFldField(m_strVarAA9A).setValue(ReportExportFormat.from_string(reportFormatName));
            } catch (Exception e) {
               e.printStackTrace();
               v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
               v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
            }

// Comment  import com.crystaldecisions.sdk.occa.report.exportoptions.ReportExportFormat;
// &(3:).assign(&(4:));
// try {
//    String reportFormatName = &(2:).getValue();
//    &(1:).setValue(ReportExportFormat.from_string(reportFormatName));
// } catch (Exception e) {
//    e.printStackTrace();
//    &(3:).assign(&(5:));
//    &(6:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
            if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
            {
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

// Name  Source code: CRYS ExportFormat.getFromName, Environment<*Object>
                v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).fromString("CRYS ExportFormat.getFromName");

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
                {
                    Object[] msgParms = new Object[4];
                    msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                    v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
                }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

            }
        }
// Pre Point L0 End Get CrystalAuto Export Options
        {
        }
// Edit Point  L0 End Get CrystalAuto Export Options
        {
        }
// Post Point L0 End Get CrystalAuto Export Options
        {
        }
    }

// ***************************************************************************
// Subroutine:	CrystalAuto Export to PDF
// ***************************************************************************

    void ObSbr_AA1F10()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  CrystalAuto Export to PDF
// Comment  Go Sub Get CrystalAuto Export Options and set Crystal Report AutoL<CRYS Export Dest Path> first!
// Pre Point L0 Start CrystalAuto Export to PDF
        {
        }
// Edit Point  L0 Start CrystalAuto Export to PDF
        {
        }
// Post Point L0 Start CrystalAuto Export to PDF
        {
        }
// Pre Point CrystalAuto Export to PDF other Language
        {
        }
// Edit Point  CrystalAuto Export to PDF other Language
        {
        }
// Post Point CrystalAuto Export to PDF other Language
        {
// Go Sub  Get CrystalAuto Export Options
            ObSbr_AA1F9();
            if(hasReturned())
                return;

// API Call  Source code: CRYS ReportClientDocument.export
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
            {
               String exportDest = v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSEXPP).getValue();
               try (OutputStream exportStream = new BufferedOutputStream(Files.newOutputStream(Paths.get(exportDest)))) {
                  ReportClientDocument rcd = (ReportClientDocument)v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue();
                  ReportExportFormat rxf = (ReportExportFormat)v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObObjFldField(m_strVarAA9A).getValue();
                  rcd.getPrintOutputController().export(rxf, exportStream);
               } catch (Exception e) {
                  e.printStackTrace();
                  v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
                  v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
               }
            }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// import com.crystaldecisions.sdk.occa.report.exportoptions.ReportExportFormat;
// import java.io.BufferedOutputStream;
// import java.io.OutputStream;
// import java.nio.file.Files;
// import java.nio.file.Paths;
// &(3:).assign(&(4:));
// {
//    String exportDest = &(2:).getValue();
//    try (OutputStream exportStream = new BufferedOutputStream(Files.newOutputStream(Paths.get(exportDest)))) {
//       ReportClientDocument rcd = (ReportClientDocument)&(1:).getValue();
//       ReportExportFormat rxf = (ReportExportFormat)&(7:).getValue();
//       rcd.getPrintOutputController().export(rxf, exportStream);
//    } catch (Exception e) {
//       e.printStackTrace();
//       &(3:).assign(&(5:));
//       &(6:).fromString(e.getLocalizedMessage());
//    }
// }
// If  Environment<*Call status> != <*Call status.*Normal>
            if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
            {
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

// Name  Source code: CRYS ReportClientDocument.export, Environment<*Object>
                v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).fromString("CRYS ReportClientDocument.export");

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
                {
                    Object[] msgParms = new Object[4];
                    msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                    v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
                }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
                ObSbr_AA1F3();
                if(hasReturned())
                    return;

            }
        }
// Pre Point L0 End CrystalAuto Export to PDF
        {
        }
// Edit Point  L0 End CrystalAuto Export to PDF
        {
        }
// Post Point L0 End CrystalAuto Export to PDF
        {
        }
    }

// ***************************************************************************
// Subroutine:	New Java ReportClientDocument
// ***************************************************************************

    void ObSbr_AA1F11()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  New Java ReportClientDocument
// Pre Point L0 Start New Java ReportClientDocument
        {
        }
// Edit Point  L0 Start New Java ReportClientDocument
        {
        }
// Post Point L0 Start New Java ReportClientDocument
        {
        }
// API Call  Source code: CRYS ReportClientDocument.isNULL
        if (v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue() == null){
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0s3).assign(m_obvalfld_10);
        } else {
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0s3).assign(m_obvalfld_9);
        }

// Comment  if (&(1:).getValue() == null){
//    &(2:).assign(&(4:));
// } else {
//    &(2:).assign(&(3:));
// }
// If  Environment<*Boolean> == <*Boolean.*False>
        if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0s3).isEqual(m_obvalfld_9) )
        {
// Go Sub  Close CrystalAuto Report
            ObSbr_AA1F8();
            if(hasReturned())
                return;

        }
// API Call  Source code: CRYS ReportClientDocument.Open CrystalAuto Report
        v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
        try {
           ReportClientDocument rcd = new ReportClientDocument();
           v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).setValue(rcd);
           rcd.setReportAppServer(ReportClientDocument.inprocConnectionString);
           String rcdPath = v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSPATH).getValue();
           rcd.open(rcdPath, OpenReportOptions._openAsReadOnly);
        } catch (Exception e) {
           e.printStackTrace();
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
        }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// import com.crystaldecisions.sdk.occa.report.application.OpenReportOptions;
// &(3:).assign(&(4:));
// try {
//    ReportClientDocument rcd = new ReportClientDocument();
//    &(1:).setValue(rcd);
//    rcd.setReportAppServer(ReportClientDocument.inprocConnectionString);
//    String rcdPath = &(2:).getValue();
//    rcd.open(rcdPath, OpenReportOptions._openAsReadOnly);
// } catch (Exception e) {
//    e.printStackTrace();
//    &(3:).assign(&(5:));
//    &(6:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
        if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
        {
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

// Name  Source code: CRYS ReportClientDocument.Open CrystalAuto Report, Environment<*Object>
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).fromString("CRYS ReportClientDocument.Open CrystalAuto Report");

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
            {
                Object[] msgParms = new Object[4];
                msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
            }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

        }
// Pre Point L0 End New Java ReportClientDocument
        {
        }
// Edit Point  L0 End New Java ReportClientDocument
        {
        }
// Post Point L0 End New Java ReportClientDocument
        {
        }
    }

// ***************************************************************************
// Subroutine:	Set ReportParameters
// ***************************************************************************

    void ObSbr_AA1F12()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Set ReportParameters
// Pre Point L0 Start Set ReportParameters
        {
        }
// Edit Point  L0 Start Set ReportParameters
        {
        }
// Post Point L0 Start Set ReportParameters
        {
        }
// Set  Crystal Report Java Runtime<CRYS ReportParameterName> = Name of cmParameter
        v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObCharFldField(m_strVarAAaA).fromString("cmParameter");
        v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObObjFldField(m_strVarAAbA).castFrom(v.getVariable(m_strVarAA1F_Crystal20Report20Parameters).getAsObCharFldField(m_strVarcmParameter));
// API Call  Source code: CRYS ReportClientDocument.Set CrystalReport parameter
        v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
        try {
           ReportClientDocument rcd = (ReportClientDocument)v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue();
           Object newValue = v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObObjFldField(m_strVarAAbA).getValue();
           String implName = v.getVariable(m_strVarAA1F_Crystal20Report20Java20Runtime).getAsObCharFldField(m_strVarAAaA).getValue();
           rcd.getDataDefController().getParameterFieldController().setCurrentValue("", implName, newValue);
        } catch (Exception e) {
           e.printStackTrace();
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
        }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// &(4:).assign(&(5:));
// try {
//    ReportClientDocument rcd = (ReportClientDocument)&(1:).getValue();
//    Object newValue = &(2:).getValue();
//    String implName = &(3:).getValue();
//    rcd.getDataDefController().getParameterFieldController().setCurrentValue("", implName, newValue);
// } catch (Exception e) {
//    e.printStackTrace();
//    &(4:).assign(&(6:));
//    &(7:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
        if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
        {
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
            {
                Object[] msgParms = new Object[4];
                msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
            }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

// Set  Environment<*Object> = Name of cmParameter
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).fromString("cmParameter");
// Go Sub  Set ReportParameter Failed
            ObSbr_AA1F13();
            if(hasReturned())
                return;

        }
// Pre Point L0 End Set ReportParameters
        {
        }
// Edit Point  L0 End Set ReportParameters
        {
        }
// Post Point L0 End Set ReportParameters
        {
        }
    }

// ***************************************************************************
// Subroutine:	Set ReportParameter Failed
// ***************************************************************************

    void ObSbr_AA1F13()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Set ReportParameter Failed
// Pre Point L0 Start Set ReportParameter Failed
        {
        }
// Edit Point  L0 Start Set ReportParameter Failed
        {
        }
// Post Point L0 Start Set ReportParameter Failed
        {
        }
// Format Message  Message: Test CR Service.Set Parameter failed, Environment<*Message text>
        {
            Object[] msgParms = new Object[3];
            msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).toString()) ; 
                                  
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Set Crystal Report Parameter {0} failed: {1}", msgParms);
        }

// Comment  Set Crystal Report Parameter &(1:) failed: &(2:)
// Go Sub  Send message
        ObSbr_AA1F3();
        if(hasReturned())
            return;

// Pre Point L0 End Set ReportParameter Failed
        {
        }
// Edit Point  L0 End Set ReportParameter Failed
        {
        }
// Post Point L0 End Set ReportParameter Failed
        {
        }
    }

// ***************************************************************************
// Subroutine:	Borrow Report Client Document from pool
// ***************************************************************************

    void ObSbr_AA1F14()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Borrow Report Client Document from pool
// Pre Point L0 Start Borrow Report Client Document from pool
        {
        }
// Edit Point  L0 Start Borrow Report Client Document from pool
        {
        }
// Post Point L0 Start Borrow Report Client Document from pool
        {
        }
// API Call  Source code: CRYS ReportClientDocument.BorrowFromPool
        v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
        try {
           KeyedObjectPool<String, ReportClientDocument> pool = (KeyedObjectPool<String, ReportClientDocument>)
              getApp().getFromUserStorage(Constants.REPORT_CLIENT_DOC_POOL_KEY);
           String reportKey = v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSPATH).getValue();
           ReportClientDocument rcd = pool.borrowObject(reportKey);
           v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).setValue(rcd);
        } catch (Exception e) {
           e.printStackTrace();
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
        }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// import org.apache.commons.pool2.KeyedObjectPool;
// import com.lincolninvestments.cr.Constants;
// &(3:).assign(&(4:));
// try {
//    KeyedObjectPool<String, ReportClientDocument> pool = (KeyedObjectPool<String, ReportClientDocument>)
//       getApp().getFromUserStorage(Constants.REPORT_CLIENT_DOC_POOL_KEY);
//    String reportKey = &(2:).getValue();
//    ReportClientDocument rcd = pool.borrowObject(reportKey);
//    &(1:).setValue(rcd);
// } catch (Exception e) {
//    e.printStackTrace();
//    &(3:).assign(&(5:));
//    &(6:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
        if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
        {
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

// Name  Source code: CRYS ReportClientDocument.BorrowFromPool, Environment<*Object>
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).fromString("CRYS ReportClientDocument.BorrowFromPool");

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
            {
                Object[] msgParms = new Object[4];
                msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
            }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
        }
// Pre Point L0 End Borrow Report Client Document from pool
        {
        }
// Edit Point  L0 End Borrow Report Client Document from pool
        {
        }
// Post Point L0 End Borrow Report Client Document from pool
        {
        }
    }

// ***************************************************************************
// Subroutine:	Return Report Client Document to pool
// ***************************************************************************

    void ObSbr_AA1F15()
    {
//  The standard set of context variables
        AA1F_ObDat	v;
        AA1F_ObIn	in;
        AA1F_ObOut	out;

        ObFunction fnc = this;

//  Initialise the standard set of context variables
        v	= (AA1F_ObDat)fnc.getDatVariable();
        in	= (AA1F_ObIn)fnc.getInVariable();
        out	= (AA1F_ObOut)fnc.getOutVariable();


// Sub  Return Report Client Document to pool
// Pre Point Start Return Report Client Document to pool
        {
        }
// Edit Point  Start Return Report Client Document to pool
        {
        }
// Post Point Start Return Report Client Document to pool
        {
        }
// API Call  Source code: CRYS ReportClientDocument.ReturnToPool
        v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_0);
        try {
           KeyedObjectPool<String, ReportClientDocument> pool = (KeyedObjectPool<String, ReportClientDocument>)
              getApp().getFromUserStorage(Constants.REPORT_CLIENT_DOC_POOL_KEY);
           String reportKey = v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObCharFldField(m_strVarCRYSPATH).getValue();
           ReportClientDocument rcd = (ReportClientDocument)v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).getValue();
           v.getVariable(m_strVarAA1F_Crystal20Report20AutoL).getAsObObjFldField(m_strVarAA8A).setValue(null);
           pool.returnObject(reportKey, rcd);
        } catch (Exception e) {
           e.printStackTrace();
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).assign(m_obvalfld_8);
           v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).fromString(e.getLocalizedMessage());
        }

// Comment  import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
// import org.apache.commons.pool2.KeyedObjectPool;
// import com.lincolninvestments.cr.Constants;
// &(3:).assign(&(4:));
// try {
//    KeyedObjectPool<String, ReportClientDocument> pool = (KeyedObjectPool<String, ReportClientDocument>)
//       getApp().getFromUserStorage(Constants.REPORT_CLIENT_DOC_POOL_KEY);
//    String reportKey = &(2:).getValue();
//    ReportClientDocument rcd = (ReportClientDocument)&(1:).getValue();
//    &(1:).setValue(null);
//    pool.returnObject(reportKey, rcd);
// } catch (Exception e) {
//    e.printStackTrace();
//    &(3:).assign(&(5:));
//    &(6:).fromString(e.getLocalizedMessage());
// }
// If  Environment<*Call status> != <*Call status.*Normal>
        if( v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).isNotEqual(m_obvalfld_0) )
        {
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

// Name  Source code: CRYS ReportClientDocument.ReturnToPool, Environment<*Object>
            v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).fromString("CRYS ReportClientDocument.ReturnToPool");

// Format Message  Message: FIELDS/FunctionCallFailed, Environment<*Message text>
            {
                Object[] msgParms = new Object[4];
                msgParms[0] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1eu).toString()) ; 
                                    msgParms[1] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0rg).toString()) ; 
                                    msgParms[2] = new String(v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx0r6).toString()) ; 
                                  
                v.getVariable(m_strVarAA1F_Environment).getAsObCharFldField(m_strVarSqmx1ed).formatMessage("Function: {0} was not found or did not execute correctly - contact your software supplier.\nThe call failed with codes:\nCS={1}\nRS={2}", msgParms);
            }

// Comment  Function: &(1:) was not found or did not execute correctly - contact your software supplier.
// The call failed with codes:
// CS=&(2:)
// RS=&(3:)
// Go Sub  Send message
            ObSbr_AA1F3();
            if(hasReturned())
                return;

        }
// Pre Point End Return Report Client Document to pool
        {
        }
// Edit Point  End Return Report Client Document to pool
        {
        }
// Post Point End Return Report Client Document to pool
        {
        }
    }

// ***************************************************************************
// The variables used by: Test CR Service
// ***************************************************************************

    ////////////////////////////////////////////////////////////////
    // ObDat Variable Group
    final class AA1F_ObDat extends ObVariableGroupX
    {
        ////////////////////////////////////////////////////////////////
        // Members

        ////////////////////////////////////////////////////////////////
        // Constructors
        public AA1F_ObDat(ObFunction fnc)
        {
            super(ObVariableGroup.VT_LOCAL, fnc);
            addVariable("AA1F_Crystal20Report20AutoL", initvarAA1F_AA1F_Crystal20Report20AutoL());
            addVariable("AA1F_Crystal20Report20Parameters", initvarAA1F_AA1F_Crystal20Report20Parameters());
            addVariable("AA1F_Crystal20Report20Java20Runtime", initvarAA1F_AA1F_Crystal20Report20Java20Runtime());
            addVariable("AA1F_Environment", initvarAA1F_AA1F_Environment());
        }

        public AA1F_ObDat(ObApplication obapp)
        {
            super(obapp, ObVariableGroup.VT_LOCAL);
            addVariable("AA1F_Crystal20Report20AutoL", initvarAA1F_AA1F_Crystal20Report20AutoL());
            addVariable("AA1F_Crystal20Report20Parameters", initvarAA1F_AA1F_Crystal20Report20Parameters());
            addVariable("AA1F_Crystal20Report20Java20Runtime", initvarAA1F_AA1F_Crystal20Report20Java20Runtime());
            addVariable("AA1F_Environment", initvarAA1F_AA1F_Environment());
        }

        public AA1F_ObDat()
        {
            super(ObVariableGroup.VT_LOCAL, null);
            addVariable("AA1F_Crystal20Report20AutoL", initvarAA1F_AA1F_Crystal20Report20AutoL());
            addVariable("AA1F_Crystal20Report20Parameters", initvarAA1F_AA1F_Crystal20Report20Parameters());
            addVariable("AA1F_Crystal20Report20Java20Runtime", initvarAA1F_AA1F_Crystal20Report20Java20Runtime());
            addVariable("AA1F_Environment", initvarAA1F_AA1F_Environment());
        }






        ////////////////////////////////////////////////////////////////
        // Crystal Report AutoL Variable
        public ObVariableX initvarAA1F_AA1F_Crystal20Report20AutoL()
        {
            ObVariableX var = new ObVariableX(this, "varAA1F_AA1F_Crystal20Report20AutoL");

            var.addField("CRYSPATH", new ObCharFld(ObField.LOCAL, 1024, 'c', "CRYSPATH", true, true, false, "", m_obapp, false)); /* CRYS Crystal Report Path */
            var.addField("WWRKCRYF", new ObCharFld(ObField.LOCAL, 512, 'c', "WWRKCRYF", false, false, false, "", m_obapp, false)); /* CRYS Crystal Selection Formula */
            var.addField("WWRKPDYN", new ObCharFld(ObField.LOCAL, 1, 'c', "WWRKPDYN", false, false, false, "", m_obapp, false)); /* WWRK Print Dialog YN */
            var.addField("CRYSDRVN", new ObCharFld(ObField.LOCAL, 1024, 'c', "CRYSDRVN", true, true, false, "", m_obapp, false)); /* CRYS Driver Name */
            var.addField("CRYSPORN", new ObCharFld(ObField.LOCAL, 1024, 'c', "CRYSPORN", true, true, false, "", m_obapp, false)); /* CRYS Port Name */
            var.addField("CRYSPRTN", new ObCharFld(ObField.LOCAL, 1024, 'c', "CRYSPRTN", true, true, false, "", m_obapp, false)); /* CRYS Printer Name */
            var.addField("CRYSPSYN", new ObCharFld(ObField.LOCAL, 1, 'c', "CRYSPSYN", false, false, false, "", m_obapp, false)); /* CRYS Preview Has Setup YN */
            var.addField("CRYSPARP", new ObCharFld(ObField.LOCAL, 1, 'c', "CRYSPARP", false, false, false, "", m_obapp, false)); /* CRYS Parm Prompting YN */
            var.addField("CRYSEXPP", new ObCharFld(ObField.LOCAL, 1024, 'c', "CRYSEXPP", true, true, false, "", m_obapp, false)); /* CRYS Export Dest Path */
            var.addField("SCRPRSTS", new ObCharFld(ObField.LOCAL, 1, 'c', "SCRPRSTS", false, false, false, "", m_obapp, false)); /* SCRP Returned Status */
            var.addField("CRYSPAPO", new ObCharFld(ObField.LOCAL, 1, 'c', "CRYSPAPO", false, false, false, "", m_obapp, false)); /* CRYS Paper Orientation */
            var.addField("CRYSDPLX", new ObCharFld(ObField.LOCAL, 1, 'c', "CRYSDPLX", false, false, false, "", m_obapp, false)); /* CRYS PrinterDuplexType */
            var.addField("AA8A", new ObObjFld(ObField.LOCAL, 0, 0, 'j', "AA8A", "", m_obapp)); /* CRYS ReportClientDocument */

            return var;
        } 

        // End of Crystal Report AutoL Variable
        ////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////
        // Crystal Report Parameters Variable
        public ObVariableX initvarAA1F_AA1F_Crystal20Report20Parameters()
        {
            ObVariableX var = new ObVariableX(this, "varAA1F_AA1F_Crystal20Report20Parameters");

            var.addField("cmParameter", new ObCharFld(ObField.LOCAL, 1024, 'c', "cmParameter", true, true, false, "", m_obapp, false)); /* Test CR Service.Parameter */

            return var;
        } 

        // End of Crystal Report Parameters Variable
        ////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////
        // Crystal Report Java Runtime Variable
        public ObVariableX initvarAA1F_AA1F_Crystal20Report20Java20Runtime()
        {
            ObVariableX var = new ObVariableX(this, "varAA1F_AA1F_Crystal20Report20Java20Runtime");

            var.addField("AA9A", new ObObjFld(ObField.LOCAL, 0, 0, 'j', "AA9A", "", m_obapp)); /* CRYS ExportFormat */
            var.addField("AA5A", new ObCharFld(ObField.LOCAL, 128, 'c', "AA5A", ObField.NULL, "", "", "", "", 0, false, false, false, "", m_obapp, false)); /* CRYS ExportFormatName */
            var.addField("AAbA", new ObObjFld(ObField.LOCAL, 0, 0, 'j', "AAbA", "", m_obapp)); /* CRYS ReportParameterObj */
            var.addField("AAaA", new ObCharFld(ObField.LOCAL, 1024, 'c', "AAaA", true, true, false, "", m_obapp, false)); /* CRYS ReportParameterName */

            return var;
        } 

        // End of Crystal Report Java Runtime Variable
        ////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////
        // Environment Variable
        public ObVariableX initvarAA1F_AA1F_Environment()
        {
            ObVariableX var = new ObVariableX(this, "varAA1F_AA1F_Environment");

            var.addField("Sqmx1ac", new ObCharFld(ObField.ENVIRONMENT, 1, 'c', "Sqmx1ac", false, false, false, "", m_obapp, false)); /* *Focus set */
            var.addField("Sqmx1bm", new ObCharFld(ObField.ENVIRONMENT, 32, 'c', "Sqmx1bm", false, false, false, "", m_obapp, false)); /* *Database */
            var.addField("Sqmx1bo", new ObCharFld(ObField.ENVIRONMENT, 32, 'c', "Sqmx1bo", false, false, false, "", m_obapp, false)); /* *System */
            var.addField("Sqmx1c9", new ObCharFld(ObField.ENVIRONMENT, 512, 'c', "Sqmx1c9", false, false, false, "", m_obapp, false)); /* *Message */
            var.addField("Sqmx1e9", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx1e9", false, false, false, "", m_obapp, false)); /* *Validation */
            var.addField("Sqmx1ed", new ObCharFld(ObField.ENVIRONMENT, 256, 'c', "Sqmx1ed", false, true, false, "", m_obapp, false)); /* *Message text */
            var.addField("Sqmx1eq", new ObCharFld(ObField.ENVIRONMENT, 1, 'c', "Sqmx1eq", false, false, false, "", m_obapp, false)); /* *Message delivery */
            var.addField("Sqmx1eu", new ObCharFld(ObField.ENVIRONMENT, 128, 'c', "Sqmx1eu", false, true, false, "", m_obapp, false)); /* *Object */
            var.addField("Sqmx1g5", new ObCharFld(ObField.ENVIRONMENT, 32, 'c', "Sqmx1g5", false, false, false, "", m_obapp, false)); /* *Message ID */
            var.addField("Sqmx0r4", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0r4", false, false, false, "", m_obapp, false)); /* *View status */
            var.addField("Sqmx0r6", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0r6", false, false, false, "", m_obapp, false)); /* *Returned status */
            var.addField("Sqmx0r8", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0r8", false, false, false, "", m_obapp, false)); /* *Returning status */
            var.addField("Sqmx0ra", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0ra", false, false, false, "", m_obapp, false)); /* *Report status */
            var.addField("Sqmx0rc", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0rc", false, false, false, "", m_obapp, false)); /* *Panel status */
            var.addField("Sqmx0re", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0re", false, false, false, "", m_obapp, false)); /* *Error status */
            var.addField("Sqmx0rg", new ObCharFld(ObField.ENVIRONMENT, 7, 'c', "Sqmx0rg", false, false, false, "", m_obapp, false)); /* *Call status */
            var.addField("Sqmx0s3", new ObCharFld(ObField.ENVIRONMENT, 1, 'c', "Sqmx0s3", false, false, false, "", m_obapp, false)); /* *Boolean */
            var.addField("Sqmx0xh", new ObCharFld(ObField.ENVIRONMENT, 32, 'c', "Sqmx0xh", false, false, false, "", m_obapp, false)); /* *Object name */

            return var;
        } 

        // End of Environment Variable
        ////////////////////////////////////////////////////////////////
    }
    // End Of Test CR Service Variable Group
    ////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    // Field Values:

        ObCharFld m_obvalfld_2 = new ObCharFld("PDF", 128);
        ObCharFld m_obvalfld_5 = new ObCharFld("N", 1);
        ObCharFld m_obvalfld_0 = new ObCharFld(" ", 7);
        ObCharFld m_obvalfld_7 = new ObCharFld("", 256);
        ObCharFld m_obvalfld_4 = new ObCharFld("S", 1);
        ObCharFld m_obvalfld_3 = new ObCharFld("D", 1);
        ObCharFld m_obvalfld_10 = new ObCharFld("1", 1);
        ObCharFld m_obvalfld_8 = new ObCharFld("ERROR", 7);
        ObCharFld m_obvalfld_9 = new ObCharFld("0", 1);
        ObCharFld m_obvalfld_6 = new ObCharFld(" ", 32);
        ObCharFld m_obvalfld_1 = new ObCharFld("L", 1);
    // End Of Field Values
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    // Variable and Field Names:

        public final String m_strVarAAaA = "AAaA";
        public final String m_strVarCRYSEXPP = "CRYSEXPP";
        public final String m_strFldSqmx0rg = "Sqmx0rg";
        public final String m_strVarSqmx1eu = "Sqmx1eu";
        public final String m_strVarAA5A = "AA5A";
        public final String m_strVarWWRKCRYF = "WWRKCRYF";
        public final String m_strVarSqmx0r8 = "Sqmx0r8";
        public final String m_strFldSqmx0r8 = "Sqmx0r8";
        public final String m_strVarAAbA = "AAbA";
        public final String m_strVarSqmx1ed = "Sqmx1ed";
        public final String m_strVarSqmx0r6 = "Sqmx0r6";
        public final String m_strVarAA1F_Input = "AA1F_Input";
        public final String m_strVarCRYSPATH = "CRYSPATH";
        public final String m_strVarSqmx1g5 = "Sqmx1g5";
        public final String m_strVarAA9A = "AA9A";
        public final String m_strVarAA1F_Crystal20Report20Parameters = "AA1F_Crystal20Report20Parameters";
        public final String m_strVarAA1F_Crystal20Report20AutoL = "AA1F_Crystal20Report20AutoL";
        public final String m_strVarAA8A = "AA8A";
        public final String m_strVarAA1F_Environment = "AA1F_Environment";
        public final String m_strVarSqmx0s3 = "Sqmx0s3";
        public final String m_strVarSqmx0rg = "Sqmx0rg";
        public final String m_strFldSqmx0r6 = "Sqmx0r6";
        public final String m_strVarcmParameter = "cmParameter";
        public final String m_strVarSqmx1eq = "Sqmx1eq";
        public final String m_strVarAA1F_Crystal20Report20Java20Runtime = "AA1F_Crystal20Report20Java20Runtime";
    // End Of Variable and Field Names
    ////////////////////////////////////////////////////////////////////////////////
}
// ***************************************************************************
